type Appointment {
	id: UUID!
	date: NaiveDate!
	title: String!
	startTime: NaiveDateTime!
	endTime: NaiveDateTime!
	location: String
	isCanceled: Boolean!
	courseId: UUID
	userId: UUID!
}


type Course {
	id: UUID!
	name: String!
	moduleId: UUID!
	userId: UUID!
	grade: Float
	teacher: String
	academicDepartment: String
}




type Module {
	id: UUID!
	name: String!
	etCs: Int!
	grade: Float
	startSemester: UUID!
	endSemester: UUID
	userId: UUID!
	courses: [Course!]!
}

type Mutation {
	createTodo(input: NewTodo!): Todo!
	updateTodo(input: UpdateTodo!, id: String!): Todo!
	createSemester(input: NewSemester!): Semester!
	createModule(input: NewModule!): Module!
	upsertCalendarLink(calendarLink: String): Settings!
	processSemesterCalendar(semesterId: String!): [RecurringAppointment!]!
	createCourse(input: NewCourse!): Course!
	createMultipleCourses(input: [String!]!): [Course!]!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

"""
ISO 8601 time without timezone.
Allows for the nanosecond precision and optional leap second representation.
Format: %H:%M:%S%.f

# Examples

* `08:59:60.123`
"""
scalar NaiveTime

input NewCourse {
	name: String!
	grade: Float
	teacher: String
	academicDepartment: String
}

input NewModule {
	name: String!
	ects: Int!
	grade: Float
	startSemester: String!
	endSemester: String
}

input NewSemester {
	semester: Int!
	startDate: NaiveDate!
	endDate: NaiveDate!
	totalEcts: Int!
}

input NewTodo {
	title: String!
	dueOn: NaiveDateTime!
	courseId: UUID
	notes: String
}

type Query {
	todo(id: String!): Todo
	todos: [Todo!]!
	todosByDate(date: NaiveDate!): [Todo!]!
	semester(semester: Int!): Semester
	semesters: [Semester!]!
	module(id: String!): Module
	modules: [Module!]!
	calendarLink: String
	appointments: [Appointment!]!
	course(id: String!): Course!
	courses: [Course!]!
}

type RecurringAppointment {
	name: String!
	weekday: WeekdayEnum!
	startTime: NaiveTime!
	endTime: NaiveTime!
	location: String!
}

type Semester {
	id: UUID!
	semesterHash: String!
	semester: Int!
	startDate: NaiveDate!
	endDate: NaiveDate!
	userId: UUID!
	importedAppointments: Boolean!
	totalEcTs: Int!
	modules: [Module!]!
}

type Settings {
	id: UUID!
	calendarLink: String
	userId: UUID!
}


type Todo {
	id: UUID!
	title: String!
	dueOn: NaiveDateTime!
	userId: UUID!
	courseId: UUID
	type: TodoType!
	status: TodoStatus!
	notes: String
}

enum TodoStatus {
	COMPLETED
	INPROGRESS
	PENDING
}

enum TodoType {
	ASSIGNMENT
	EXAM
	GENERAL
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

input UpdateTodo {
	id: UUID!
	title: String!
	dueOn: NaiveDateTime!
	courseId: UUID
	notes: String
}

enum WeekdayEnum {
	MONDAY
	TUESDAY
	WEDNESDAY
	THURSDAY
	FRIDAY
	SATURDAY
	SUNDAY
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: Query
	mutation: Mutation
}
