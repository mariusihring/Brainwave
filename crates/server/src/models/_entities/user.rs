//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, async_graphql :: Object)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub image: Option<String>,
    pub username: String,
    pub password_hash: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::appointment::Entity")]
    Appointment,
    #[sea_orm(has_many = "super::calendar_entry::Entity")]
    CalendarEntry,
    #[sea_orm(has_many = "super::course::Entity")]
    Course,
    #[sea_orm(has_many = "super::flashcard::Entity")]
    Flashcard,
    #[sea_orm(has_many = "super::flashcard_reference::Entity")]
    FlashcardReference,
    #[sea_orm(has_many = "super::module::Entity")]
    Module,
    #[sea_orm(has_many = "super::note::Entity")]
    Note,
    #[sea_orm(has_many = "super::notebook::Entity")]
    Notebook,
    #[sea_orm(has_many = "super::semester::Entity")]
    Semester,
    #[sea_orm(has_many = "super::session::Entity")]
    Session,
    #[sea_orm(has_many = "super::settings::Entity")]
    Settings,
    #[sea_orm(has_many = "super::tag::Entity")]
    Tag,
    #[sea_orm(has_many = "super::taggable::Entity")]
    Taggable,
    #[sea_orm(has_many = "super::todo::Entity")]
    Todo,
    #[sea_orm(has_many = "super::todo_reference::Entity")]
    TodoReference,
}

impl Related<super::appointment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Appointment.def()
    }
}

impl Related<super::calendar_entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CalendarEntry.def()
    }
}

impl Related<super::course::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Course.def()
    }
}

impl Related<super::flashcard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Flashcard.def()
    }
}

impl Related<super::flashcard_reference::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlashcardReference.def()
    }
}

impl Related<super::module::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Module.def()
    }
}

impl Related<super::note::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Note.def()
    }
}

impl Related<super::notebook::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notebook.def()
    }
}

impl Related<super::semester::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Semester.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}

impl Related<super::settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Settings.def()
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tag.def()
    }
}

impl Related<super::taggable::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Taggable.def()
    }
}

impl Related<super::todo::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Todo.def()
    }
}

impl Related<super::todo_reference::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TodoReference.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
