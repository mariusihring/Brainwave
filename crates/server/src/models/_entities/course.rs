//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, async_graphql :: SimpleObject)]
#[sea_orm(table_name = "course")]
#[graphql(name = "Course")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub module_id: Option<Uuid>,
    pub user_id: Uuid,
    #[sea_orm(column_type = "Float", nullable)]
    pub grade: Option<f32>,
    pub teacher: Option<String>,
    pub academic_department: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::appointment::Entity")]
    Appointment,
    #[sea_orm(has_many = "super::flashcard::Entity")]
    Flashcard,
    #[sea_orm(
        belongs_to = "super::module::Entity",
        from = "Column::ModuleId",
        to = "super::module::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Module,
    #[sea_orm(has_many = "super::notebook::Entity")]
    Notebook,
    #[sea_orm(has_many = "super::todo::Entity")]
    Todo,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::appointment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Appointment.def()
    }
}

impl Related<super::flashcard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Flashcard.def()
    }
}

impl Related<super::module::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Module.def()
    }
}

impl Related<super::notebook::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notebook.def()
    }
}

impl Related<super::todo::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Todo.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
