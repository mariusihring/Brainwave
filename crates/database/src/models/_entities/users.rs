//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub image: Option<String>,
    pub username: String,
    pub password_hash: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::appointments::Entity")]
    Appointments,
    #[sea_orm(has_many = "super::calendar_entries::Entity")]
    CalendarEntries,
    #[sea_orm(has_many = "super::courses::Entity")]
    Courses,
    #[sea_orm(has_many = "super::flashcard_references::Entity")]
    FlashcardReferences,
    #[sea_orm(has_many = "super::flashcards::Entity")]
    Flashcards,
    #[sea_orm(has_many = "super::modules::Entity")]
    Modules,
    #[sea_orm(has_many = "super::notebooks::Entity")]
    Notebooks,
    #[sea_orm(has_many = "super::notes::Entity")]
    Notes,
    #[sea_orm(has_many = "super::semesters::Entity")]
    Semesters,
    #[sea_orm(has_many = "super::sessions::Entity")]
    Sessions,
    #[sea_orm(has_many = "super::settings::Entity")]
    Settings,
    #[sea_orm(has_many = "super::taggables::Entity")]
    Taggables,
    #[sea_orm(has_many = "super::tags::Entity")]
    Tags,
    #[sea_orm(has_many = "super::todos::Entity")]
    Todos,
    #[sea_orm(has_many = "super::todos_reference::Entity")]
    TodosReference,
}

impl Related<super::appointments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Appointments.def()
    }
}

impl Related<super::calendar_entries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CalendarEntries.def()
    }
}

impl Related<super::courses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Courses.def()
    }
}

impl Related<super::flashcard_references::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlashcardReferences.def()
    }
}

impl Related<super::flashcards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Flashcards.def()
    }
}

impl Related<super::modules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Modules.def()
    }
}

impl Related<super::notebooks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notebooks.def()
    }
}

impl Related<super::notes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notes.def()
    }
}

impl Related<super::semesters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Semesters.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl Related<super::settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Settings.def()
    }
}

impl Related<super::taggables::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Taggables.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tags.def()
    }
}

impl Related<super::todos::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Todos.def()
    }
}

impl Related<super::todos_reference::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TodosReference.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
