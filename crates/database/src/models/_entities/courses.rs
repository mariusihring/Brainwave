//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "courses")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub module_id: String,
    pub user_id: String,
    #[sea_orm(column_type = "Float", nullable)]
    pub grade: Option<f32>,
    pub teacher: Option<String>,
    pub academic_department: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::appointments::Entity")]
    Appointments,
    #[sea_orm(has_many = "super::flashcards::Entity")]
    Flashcards,
    #[sea_orm(
        belongs_to = "super::modules::Entity",
        from = "Column::ModuleId",
        to = "super::modules::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Modules,
    #[sea_orm(has_many = "super::notebooks::Entity")]
    Notebooks,
    #[sea_orm(has_many = "super::todos::Entity")]
    Todos,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::appointments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Appointments.def()
    }
}

impl Related<super::flashcards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Flashcards.def()
    }
}

impl Related<super::modules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Modules.def()
    }
}

impl Related<super::notebooks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notebooks.def()
    }
}

impl Related<super::todos::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Todos.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
